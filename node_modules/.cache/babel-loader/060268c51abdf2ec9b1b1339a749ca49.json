{"ast":null,"code":"var _jsxFileName = \"/Users/larshollingsed/git/stock_info_app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport companyList from './modules/comanyList.js';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { AutoComplete } from 'antd';\nimport CanvasJSReact from 'react-canvas-js'; //var CanvasJSReact = require('./canvasjs.react');\n// var CanvasJS = CanvasJSReact.CanvasJS;\n// var CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst base = 'https://cloud.iexapis.com/stable/stock';\nconst token = '/chart/1m?token=pk_0b61d9bd2072480cb885c51c1a47f59d';\n\nconst generateUrl = code => `${base}/${code}${token}`;\n\nconst getDailyAvgs = ({\n  data\n}) => data.map(({\n  open,\n  close,\n  high,\n  low\n}) => parseFloat(((open + close + high + low) / 4).toFixed(2)));\n\nconst App = () => {\n  const [search, setSearch] = useState('');\n  const [options, setOptions] = useState([]);\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    let matches = [];\n\n    if (search.length) {\n      matches = companyList.filter(company => company.lowerName.includes(search) || company.lowerSymbol.includes(search));\n    }\n\n    setOptions(matches);\n  }, [search]);\n\n  const onSearch = value => {\n    const searchInput = value.toLowerCase();\n    setSearch(searchInput); // setDailyAvgs([]);\n  };\n\n  const onSelect = value => setSearch(value);\n\n  const checkStock = async () => {\n    const resp = await axios.get(generateUrl(search));\n    debugger; // setDailyAvgs(getDailyAvgs(resp));\n    // console.log(getDailyAvgs(resp));\n  };\n\n  const chartOptions = {\n    theme: \"light2\",\n    // \"light1\", \"light2\", \"dark1\", \"dark2\"\n    animationEnabled: true,\n    exportEnabled: true,\n    title: {\n      text: \"Intel Corporation Stock Price -  2017\"\n    },\n    axisX: {\n      valueFormatString: \"MMM\"\n    },\n    axisY: {\n      includeZero: false,\n      prefix: \"$\",\n      title: \"Price (in USD)\"\n    },\n    data: [{\n      type: \"candlestick\",\n      showInLegend: true,\n      name: \"Intel Corporation\",\n      yValueFormatString: \"$###0.00\",\n      xValueFormatString: \"MMMM YY\",\n      dataPoints: history\n    }]\n  };\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(AutoComplete, {\n    onSearch: onSearch,\n    value: search,\n    style: {\n      width: '300px'\n    },\n    onSelect: onSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, options.map(option => React.createElement(AutoComplete.Option, {\n    key: option.lowerSymbol,\n    value: option.lowerSymbol,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, `${option.symbol} - ${option.name}`))), React.createElement(\"button\", {\n    onClick: checkStock,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Check Stock\"), history.length && React.createElement(CanvasJSReact.CanvasJSChart, {\n    options: chartOptions,\n    onRef: ref => this.chart = ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/larshollingsed/git/stock_info_app/src/App.js"],"names":["React","useEffect","useState","axios","companyList","AutoComplete","CanvasJSReact","base","token","generateUrl","code","getDailyAvgs","data","map","open","close","high","low","parseFloat","toFixed","App","search","setSearch","options","setOptions","history","setHistory","matches","length","filter","company","lowerName","includes","lowerSymbol","onSearch","value","searchInput","toLowerCase","onSelect","checkStock","resp","get","chartOptions","theme","animationEnabled","exportEnabled","title","text","axisX","valueFormatString","axisY","includeZero","prefix","type","showInLegend","name","yValueFormatString","xValueFormatString","dataPoints","width","option","symbol","ref","chart"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAO,WAAP;AACA,OAAO,oBAAP;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG,wCAAb;AACA,MAAMC,KAAK,GAAG,qDAAd;;AACA,MAAMC,WAAW,GAAIC,IAAD,IAAW,GAAEH,IAAK,IAAGG,IAAK,GAAEF,KAAM,EAAtD;;AAEA,MAAMG,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACnBA,IAAI,CAACC,GAAL,CAAS,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA;AAArB,CAAD,KACPC,UAAU,CAAC,CAAC,CAACJ,IAAI,GAAGC,KAAP,GAAeC,IAAf,GAAsBC,GAAvB,IAA8B,CAA/B,EAAkCE,OAAlC,CAA0C,CAA1C,CAAD,CADZ,CADF;;AAMA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,OAAO,GAAG,EAAd;;AACA,QAAIN,MAAM,CAACO,MAAX,EAAmB;AACjBD,MAAAA,OAAO,GAAGvB,WAAW,CAACyB,MAAZ,CACRC,OAAO,IAAIA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,CAA2BX,MAA3B,KACXS,OAAO,CAACG,WAAR,CAAoBD,QAApB,CAA6BX,MAA7B,CAFQ,CAAV;AAID;;AAEDG,IAAAA,UAAU,CAACG,OAAD,CAAV;AACD,GAVQ,EAUN,CAACN,MAAD,CAVM,CAAT;;AAYA,QAAMa,QAAQ,GAAIC,KAAD,IAAW;AAC1B,UAAMC,WAAW,GAAGD,KAAK,CAACE,WAAN,EAApB;AACAf,IAAAA,SAAS,CAACc,WAAD,CAAT,CAF0B,CAG1B;AACD,GAJD;;AAMA,QAAME,QAAQ,GAAGH,KAAK,IAAIb,SAAS,CAACa,KAAD,CAAnC;;AAEA,QAAMI,UAAU,GAAG,YAAY;AAC7B,UAAMC,IAAI,GAAG,MAAMrC,KAAK,CAACsC,GAAN,CAAUhC,WAAW,CAACY,MAAD,CAArB,CAAnB;AACA,aAF6B,CAG7B;AACA;AACD,GALD;;AAOA,QAAMqB,YAAY,GAAG;AACpBC,IAAAA,KAAK,EAAE,QADa;AACH;AACjBC,IAAAA,gBAAgB,EAAE,IAFE;AAGpBC,IAAAA,aAAa,EAAE,IAHK;AAIpBC,IAAAA,KAAK,EAAC;AACLC,MAAAA,IAAI,EAAE;AADD,KAJc;AAOpBC,IAAAA,KAAK,EAAE;AACNC,MAAAA,iBAAiB,EAAE;AADb,KAPa;AAUpBC,IAAAA,KAAK,EAAE;AACNC,MAAAA,WAAW,EAAC,KADN;AAENC,MAAAA,MAAM,EAAE,GAFF;AAGNN,MAAAA,KAAK,EAAE;AAHD,KAVa;AAepBlC,IAAAA,IAAI,EAAE,CAAC;AACNyC,MAAAA,IAAI,EAAE,aADA;AAENC,MAAAA,YAAY,EAAE,IAFR;AAGNC,MAAAA,IAAI,EAAE,mBAHA;AAINC,MAAAA,kBAAkB,EAAE,UAJd;AAKNC,MAAAA,kBAAkB,EAAE,SALd;AAMNC,MAAAA,UAAU,EAAEjC;AANN,KAAD;AAfc,GAArB;AAyBA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AACE,IAAA,QAAQ,EAAES,QADZ;AAEE,IAAA,KAAK,EAAEb,MAFT;AAGE,IAAA,KAAK,EAAE;AAAEsC,MAAAA,KAAK,EAAE;AAAT,KAHT;AAIE,IAAA,QAAQ,EAAErB,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGf,OAAO,CAACV,GAAR,CAAY+C,MAAM,IACjB,oBAAC,YAAD,CAAc,MAAd;AAAqB,IAAA,GAAG,EAAEA,MAAM,CAAC3B,WAAjC;AAA8C,IAAA,KAAK,EAAE2B,MAAM,CAAC3B,WAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,GAAE2B,MAAM,CAACC,MAAO,MAAKD,MAAM,CAACL,IAAK,EADrC,CADD,CANH,CADF,EAaE;AAAQ,IAAA,OAAO,EAAEhB,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAbF,EAcGd,OAAO,CAACG,MAAR,IAAkB,oBAAC,aAAD,CAAe,aAAf;AACjB,IAAA,OAAO,EAAEc,YADQ;AAErB,IAAA,KAAK,EAAEoB,GAAG,IAAI,KAAKC,KAAL,GAAaD,GAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdrB,CADF;AAqBD,CA9ED;;AAgFA,eAAe1C,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport companyList from './modules/comanyList.js';\nimport './App.css';\nimport 'antd/dist/antd.css'\nimport { AutoComplete } from 'antd';\nimport CanvasJSReact from 'react-canvas-js';\n//var CanvasJSReact = require('./canvasjs.react');\n// var CanvasJS = CanvasJSReact.CanvasJS;\n// var CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst base = 'https://cloud.iexapis.com/stable/stock';\nconst token = '/chart/1m?token=pk_0b61d9bd2072480cb885c51c1a47f59d';\nconst generateUrl = (code) => `${base}/${code}${token}`;\n\nconst getDailyAvgs = ({ data }) => (\n  data.map(({ open, close, high, low }) => (\n    parseFloat(((open + close + high + low) / 4).toFixed(2))\n  ))\n);\n\nconst App = () => {\n  const [search, setSearch] = useState('');\n  const [options, setOptions] = useState([]);\n  const [history, setHistory] = useState([]);\n\n  useEffect(() => {\n    let matches = [];\n    if (search.length) {\n      matches = companyList.filter(\n        company => company.lowerName.includes(search) ||\n        company.lowerSymbol.includes(search)\n      );\n    }\n\n    setOptions(matches);\n  }, [search])\n\n  const onSearch = (value) => {\n    const searchInput = value.toLowerCase();\n    setSearch(searchInput);\n    // setDailyAvgs([]);\n  };\n\n  const onSelect = value => setSearch(value);\n\n  const checkStock = async () => {\n    const resp = await axios.get(generateUrl(search));\n    debugger\n    // setDailyAvgs(getDailyAvgs(resp));\n    // console.log(getDailyAvgs(resp));\n  }\n\n  const chartOptions = {\n\t\t\ttheme: \"light2\", // \"light1\", \"light2\", \"dark1\", \"dark2\"\n\t\t\tanimationEnabled: true,\n\t\t\texportEnabled: true,\n\t\t\ttitle:{\n\t\t\t\ttext: \"Intel Corporation Stock Price -  2017\"\n\t\t\t},\n\t\t\taxisX: {\n\t\t\t\tvalueFormatString: \"MMM\"\n\t\t\t},\n\t\t\taxisY: {\n\t\t\t\tincludeZero:false,\n\t\t\t\tprefix: \"$\",\n\t\t\t\ttitle: \"Price (in USD)\"\n\t\t\t},\n\t\t\tdata: [{\n\t\t\t\ttype: \"candlestick\",\n\t\t\t\tshowInLegend: true,\n\t\t\t\tname: \"Intel Corporation\",\n\t\t\t\tyValueFormatString: \"$###0.00\",\n\t\t\t\txValueFormatString: \"MMMM YY\",\n\t\t\t\tdataPoints: history,\n      }],\n    };\n\n  return (\n    <div className=\"App\">\n      <AutoComplete\n        onSearch={onSearch}\n        value={search}\n        style={{ width: '300px' }}\n        onSelect={onSelect}\n      >\n        {options.map(option => (\n          <AutoComplete.Option key={option.lowerSymbol} value={option.lowerSymbol}>\n            {`${option.symbol} - ${option.name}`}\n          </AutoComplete.Option>\n        ))}\n      </AutoComplete>\n      <button onClick={checkStock}>Check Stock</button>\n      {history.length && <CanvasJSReact.CanvasJSChart\n        options={chartOptions}\n\t\t\t\tonRef={ref => this.chart = ref}\n\t\t\t/>}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}